#+TITLE: Emacs Configuration
#+DESCRIPTION: Emacs Configuration
* Emacs Evil
** Evil
#+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      (setq x-select-enable-clipboard nil)
      (setq evil-search-module 'evil-search evil-want-C-u-scroll t evil-want-C-w-in-emacs-state t)
      :config
      (when (require 'evil-collection nil t) (evil-collection-init))
      (evil-mode))
    (use-package evil-surround
      :ensure t
      :config
      (global-evil-surround-mode t))
    (use-package evil-commentary
      :ensure t
      :diminish evil-commentary-mode
      :config (evil-commentary-mode))
    (use-package evil-collection
        :custom (evil-collection-term-sync-state-and-mode-p t)
        :init (evil-collection-init))
    (use-package evil-collection
    :custom (evil-collection-setup-minibuffer t)
    :init (evil-collection-init))

#+END_SRC

** Neotree
#+BEGIN_SRC emacs-lisp
      (use-package neotree
        :ensure t
        :bind (("<f8>" . neotree-toggle))
        :defer
        :config
          (require 'all-the-icons) ;; TODO not working
          (setq neo-smart-open t)
          (setq neo-window-width 35)
          (setq neo-show-hidden-files nil)
          ;; (setq-default neo-show-hidden-files t)
          (evil-set-initial-state 'neotree-mode 'normal)
          (setq neo-hidden-regexp-list '("\\.pyc$" "~$" "^#.*#$" "\\.elc$" "\\.o$" "__pycache__" "\\.swp$" "\\.swo$" "\\.DS_Store$"))
    )
  (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
(add-hook 'neotree-mode-hook
      (lambda ()
        (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter-vertical-split)
        (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-enter-horizontal-split)
        (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
        (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)))

#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
(use-package wgrep
  :ensure t
  :config (use-package wgrep-helm :ensure t))
(require 'helm)
(require 'helm-mode)
(require 'helm-config)
(setq helm-ag-insert-at-point 'symbol)

(define-key evil-normal-state-map (kbd "C-c C-e") 'wgrep-change-to-wgrep-mode)
(define-key evil-normal-state-map (kbd "C-x b") 'helm-buffers-list)
(define-key evil-normal-state-map (kbd "C-x k") 'helm-show-kill-ring)
(define-key evil-normal-state-map (kbd "C-x l") 'helm-bookmarks)
(define-key evil-normal-state-map (kbd "C-x s") 'helm-projectile-ag)
(define-key evil-normal-state-map (kbd "C-x f") 'helm-find-files)
(define-key evil-normal-state-map (kbd "C-x p") 'helm-projectile)
(define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)

;; making sure tab completion works
(with-eval-after-load 'helm (define-key helm-find-files-map (kbd "TAB")
			    'helm-execute-persistent-action))
(defadvice helm-projectile-find-file (after helm-projectile-find-file activate)
(neotree-dir default-directory))

;; helm evil completion
(define-key helm-map (kbd "C-j") 'helm-next-line)
(define-key helm-map (kbd "C-k") 'helm-previous-line)
(define-key helm-map (kbd "C-h") 'helm-next-source)
(define-key helm-map (kbd "C-S-h") 'describe-key)
(define-key helm-map (kbd "C-l") (kbd "RET"))
(define-key helm-map [escape] 'helm-keyboard-quit)
(dolist (keymap (list helm-find-files-map helm-read-file-map))
  (define-key keymap (kbd "C-l") 'helm-execute-persistent-action)
  (define-key keymap (kbd "C-h") 'helm-find-files-up-one-level)
  (define-key keymap (kbd "C-S-h") 'describe-key))

#+END_SRC

** Emmet
#+BEGIN_SRC emacs-lisp
(require 'phi-autopair)
(require 'emmet-mode)
(setq emmet-expand-jsx-className? t) ;; default nil
(phi-autopair-global-mode)
(define-key evil-normal-state-map (kbd ",,") 'emmet-expand-line)
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
(add-hook 'emmet-mode-hook (lambda ()
			    (setq emmet-indentation 2))) ;; indent 2 spaces.

#+END_SRC

** Org Jira
#+BEGIN_SRC emacs-lisp
(require 'org-jira)
(setq jiralib-url "https://jira.traxtech.com")

(define-key evil-normal-state-map (kbd "C-c pg") 'org-jira-get-projects)
(define-key evil-normal-state-map (kbd "C-c ib") 'org-jira-browse-issue)
(define-key evil-normal-state-map (kbd "C-c ig") 'org-jira-get-issues)
(define-key evil-normal-state-map (kbd "C-c ij") 'org-jira-get-issues-from-custom-jql)
(define-key evil-normal-state-map (kbd "C-c ih") 'org-jira-get-issues-headonly)
(define-key evil-normal-state-map (kbd "C-c iu") 'org-jira-update-issue)
(define-key evil-normal-state-map (kbd "C-c iw") 'org-jira-progress-issue)
(define-key evil-normal-state-map (kbd "C-c in") 'org-jira-progress-issue-next)
(define-key evil-normal-state-map (kbd "C-c ia") 'org-jira-assign-issue)
(define-key evil-normal-state-map (kbd "C-c ir") 'org-jira-refresh-issue)
(define-key evil-normal-state-map (kbd "C-c iR") 'org-jira-refresh-issues-in-buffer)
(define-key evil-normal-state-map (kbd "C-c ic") 'org-jira-create-issue)
(define-key evil-normal-state-map (kbd "C-c ik") 'org-jira-copy-current-issue-key)
(define-key evil-normal-state-map (kbd "C-c sc") 'org-jira-create-subtask)
(define-key evil-normal-state-map (kbd "C-c sg") 'org-jira-get-subtasks)
(define-key evil-normal-state-map (kbd "C-c cc") 'org-jira-add-comment)
(define-key evil-normal-state-map (kbd "C-c cu") 'org-jira-update-comment)
(define-key evil-normal-state-map (kbd "C-c wu") 'org-jira-update-worklogs-from-org-clocks)
(define-key evil-normal-state-map (kbd "C-c tj") 'org-jira-todo-to-jira)
(define-key evil-normal-state-map (kbd "C-c if") 'org-jira-get-issues-by-fixversion)

;; Jira queries
(setq org-jira-custom-jqls
    '(
(:jql " assignee = currentUser() and project in ('AEM', 'AE', 'CRNOTE', 'DUP')
AND status not in ('Done', 'Cancelled', 'Rejected', 'Closed')
AND sprint in openSprints()
ORDER BY updatedDate DESC, createdDate DESC "
	    :limit 100
	    :filename "joey-sprints")
(:jql " assignee = 'Shiva.Kanoju' and project in ('AEM', 'AE', 'CRNOTE', 'DUP')
AND status not in ('Done', 'Cancelled', 'Rejected', 'Closed')
AND sprint in openSprints()
ORDER BY updatedDate DESC, createdDate DESC "
	    :limit 100
	    :filename "shiva-sprints")
(:jql " project in ('AEM', 'AE', 'CRNOTE', 'DUP')
AND status not in ('Done', 'Cancelled', 'Rejected', 'Closed')
AND sprint in openSprints()
ORDER BY updatedDate DESC, createdDate DESC "
	    :limit 100
	    :filename "combined-sprints")
))

#+END_SRC

** Dumb Jump
#+BEGIN_SRC emacs-lisp
;; Jump to files and folders
(use-package dumb-jump
:ensure t
:bind (("M-g o" . dumb-jump-go-other-window)
	("M-g j" . dumb-jump-go)
	("M-g b" . dumb-jump-back)
	("M-g q" . dumb-jump-quick-look)
	("M-g x" . dumb-jump-go-prefer-external)
	("M-g z" . dumb-jump-go-prefer-external-other-window))
:config (setq dumb-jump-selector 'helm)
(setq dumb-jump-force-searcher 'ag))

(define-key evil-normal-state-map (kbd "gd") 'dumb-jump-go)
(define-key evil-normal-state-map (kbd "gb") 'dumb-jump-back)
(define-key evil-normal-state-map (kbd "ge") 'dumb-jump-go-prefer-external)

#+END_SRC

** Linter Flycheck
#+BEGIN_SRC emacs-lisp
;; Setup Linter
;; http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html
;; use web-mode for .jsx files
(add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))
;; http://www.flycheck.org/manual/latest/index.html
(require 'flycheck)
;; turn on flychecking globally
(add-hook 'after-init-hook #'global-flycheck-mode)
;; disable jshint since we prefer eslint checking
(setq-default flycheck-disabled-checkers (append flycheck-disabled-checkers '(javascript-jshint)))
;; use eslint with web-mode for jsx files
(flycheck-add-mode 'javascript-eslint 'web-mode)
;; customize flycheck temp file prefix
(setq-default flycheck-temp-prefix ".flycheck")
;; disable json-jsonlist checking for json files
(setq-default flycheck-disabled-checkers (append flycheck-disabled-checkers '(json-jsonlist)))
;; Setup Mac only
(when (memq window-system '(mac ns))
(exec-path-from-shell-initialize))
#+END_SRC

** Setup project linter
#+BEGIN_SRC emacs-lisp
;; use local eslint from node_modules before global
;; http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
(defun my/use-eslint-from-node-modules ()
(let* ((root (locate-dominating-file (or (buffer-file-name)
					default-directory) "node_modules"))
	(eslint (and root
		    (expand-file-name "node_modules/.bin/eslint" root))))
    (when (and eslint
	    (file-executable-p eslint))
    (setq-local flycheck-javascript-eslint-executable eslint))))
(add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)

;; for better jsx syntax-highlighting in web-mode
;; - courtesy of Patrick @halbtuerke
(defadvice web-mode-highlight-part (around tweak-jsx activate)
(if (equal web-mode-content-type "jsx")
    (let ((web-mode-enable-part-face nil)) ad-do-it) ad-do-it))
#+END_SRC

** Show lint errors on buffer
#+BEGIN_SRC emacs-lisp
;; Show lint errors if any on buffer
(defun flycheck-list-errors-only-when-errors ()
(if flycheck-current-errors (flycheck-list-errors)
    (-when-let (buffer (get-buffer flycheck-error-list-buffer))
    (dolist (window (get-buffer-window-list buffer))
	(quit-window nil window)))))
(add-hook 'flycheck-after-syntax-check-hook #'flycheck-list-errors-only-when-errors)
#+END_SRC

** Fix lint error function
#+BEGIN_SRC emacs-lisp
;; Fix lint: M-x eslint-fix
;;     (eval-after-load 'js-mode
;;       '(add-hook 'js-mode-hook (lambda () (add-hook 'after-save-hook 'eslint-fix nil t))))
;;
;;     (eval-after-load 'js2-mode
;;       '(add-hook 'js2-mode-hook (lambda () (add-hook 'after-save-hook 'eslint-fix nil t))))

(defgroup eslint-fix nil
"Fix JavaScript linting issues with ‘eslint-fix’."
:link '(function-link eslint-fix)
:tag "ESLint Fix"
:group 'tools)

(defcustom eslint-fix-options nil
"Additional options to pass to ESLint (e.g. “--quiet”)."
:tag "ESLint Options"
:type '(repeat string))

;;;###autoload
(defun eslint-fix ()
"Format the current file with ESLint."
(interactive)
(unless buffer-file-name
    (error
    "ESLint requires a file-visiting buffer"))
(when (buffer-modified-p)
    (if (y-or-n-p (format "Save file %s? " buffer-file-name))
	(save-buffer)
    (error
    "ESLint may only be run on an unmodified buffer")))
(let* ((root (locate-dominating-file (or (buffer-file-name)
					default-directory) "node_modules"))
	(eslint (and root
		    (expand-file-name "node_modules/.bin/eslint" root))))
    (when (and eslint
	    (file-executable-p eslint))
    (setq-local options (append eslint-fix-options (list "--fix" buffer-file-name)))
    (apply #'call-process eslint nil "*ESLint Errors*" nil options)
    (revert-buffer t t t)
    (flycheck-buffer))))

(provide 'eslint-fix)
#+END_SRC

** Landing page
#+BEGIN_SRC emacs-lisp
;; Enable dashboard as start screen
(use-package dashboard
    :ensure t
    ;; :diminish dashboard-mode
    :config
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents  . 10)
                            (bookmarks . 20)))
    (setq dashboard-set-footer nil)
    (setq dashboard-init-info "Welcome to EMACS!")
    (dashboard-setup-startup-hook))


#+END_SRC

** Key bindings
#+BEGIN_SRC emacs-lisp
(require 'elisp-format)

;; git and eslint and buffers
(define-key evil-normal-state-map (kbd "C-x ib") 'flycheck-list-errors-only-when-errors)
(define-key evil-normal-state-map (kbd "C-x i") 'eslint-fix)
(define-key evil-normal-state-map (kbd "C-x m") 'multi-term)
(define-key evil-normal-state-map (kbd "C-x w") 'save-buffer)
(define-key evil-normal-state-map (kbd "C-x g") 'magit-status)


;; window navigation
(define-key evil-normal-state-map (kbd "C-h") #'evil-window-left)
(define-key evil-normal-state-map (kbd "C-j") #'evil-window-down)
(define-key evil-normal-state-map (kbd "C-k") #'evil-window-up)
(define-key evil-normal-state-map (kbd "C-l") #'evil-window-right)

;; help commands
(define-key evil-normal-state-map (kbd "C-x hk") 'describe-key)
(define-key evil-normal-state-map (kbd "C-x hf") 'describe-function)

(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
 
;; image will not show
(setq org-image-actual-width nil)

;; enable js2-mode
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
#+END_SRC

** Taskjuggler
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-export-backends 'taskjuggler)
;; adjusting width for the gantt chart
(setq org-taskjuggler-default-reports
'("textreport report \"Plan\" {
formats html
header '== %title =='
center -8<-
[#Plan Plan] | [#Resource_Allocation Resource Allocation]
----
=== Plan ===
<[report id=\"plan\"]>
----
=== Resource Allocation ===
<[report id=\"resourceGraph\"]>
->8-
}
# A traditional Gantt chart with a project overview.
taskreport plan \"\" {
headline \"Project Plan\"
columns bsi, name, start, end, effort, duration, weekly { width 800 }
loadunit shortauto
hideresource 1
}
# A graph showing resource allocation. It identifies whether each
# resource is under- or over-allocated for.
resourcereport resourceGraph \"\" {
headline \"Resource Allocation Graph\"
columns no, name, effort, weekly { width 1000 }
loadunit shortauto
hidetask ~(isleaf() & isleaf_())
sorttasks plan.start.up
}")
)
(setq org-taskjuggler-default-project-duration 999)
(setq org-taskjuggler-valid-task-attributes
'(account start note duration endbuffer endcredit end
flags journalentry length limits maxend maxstart minend
minstart period reference responsible scheduling
startbuffer startcredit statusnote chargeset charge booking))

#+END_SRC

** Folding
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook '(lambda ()
                         (visual-line-mode)
                         (org-indent-mode)))
#+END_SRC

** Org Mode
#+BEGIN_SRC emacs-lisp
;; (setq org-log-done 'time)
(setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "HOLD(h)" "IN PROGRESS(p)" "|" "DONE(d!)" "CANCELLED(c)")))
(setq org-latex-packages-alist '(("margin=2cm" "geometry" nil)))
#+END_SRC

** Org Agenda evil mode
#+BEGIN_SRC emacs-lisp
(eval-after-load 'org-agenda
 '(progn
    (evil-set-initial-state 'org-agenda-mode 'normal)
    (evil-define-key 'normal org-agenda-mode-map
      (kbd "<RET>") 'org-agenda-switch-to
      (kbd "\t") 'org-agenda-goto

      "q" 'org-agenda-quit
      "r" 'org-agenda-redo
      "S" 'org-save-all-org-buffers
      "gj" 'org-agenda-goto-date
      "gJ" 'org-agenda-clock-goto
      "gm" 'org-agenda-bulk-mark
      "go" 'org-agenda-open-link
      "s" 'org-agenda-schedule
      "+" 'org-agenda-priority-up
      "," 'org-agenda-priority
      "-" 'org-agenda-priority-down
      "y" 'org-agenda-todo-yesterday
      "n" 'org-agenda-add-note
      "t" 'org-agenda-todo
      ":" 'org-agenda-set-tags
      ";" 'org-timer-set-timer
      "I" 'helm-org-task-file-headings
      "i" 'org-agenda-clock-in-avy
      "O" 'org-agenda-clock-out-avy
      "u" 'org-agenda-bulk-unmark
      "x" 'org-agenda-exit
      "j"  'org-agenda-next-line
      "k"  'org-agenda-previous-line
      "vt" 'org-agenda-toggle-time-grid
      "va" 'org-agenda-archives-mode
      "vw" 'org-agenda-week-view
      "vl" 'org-agenda-log-mode
      "vd" 'org-agenda-day-view
      "vc" 'org-agenda-show-clocking-issues
      "g/" 'org-agenda-filter-by-tag
      "o" 'delete-other-windows
      "gh" 'org-agenda-holiday
      "gv" 'org-agenda-view-mode-dispatch
      "f" 'org-agenda-later
      "b" 'org-agenda-earlier
      "c" 'helm-org-capture-templates
      "e" 'org-agenda-set-effort
      "n" nil  ; evil-search-next
      "{" 'org-agenda-manipulate-query-add-re
      "}" 'org-agenda-manipulate-query-subtract-re
      "A" 'org-agenda-toggle-archive-tag
      "." 'org-agenda-goto-today
      "0" 'evil-digit-argument-or-evil-beginning-of-line
      "<" 'org-agenda-filter-by-category
      ">" 'org-agenda-date-prompt
      "F" 'org-agenda-follow-mode
      "D" 'org-agenda-deadline
      "H" 'org-agenda-holidays
      "J" 'org-agenda-next-date-line
      "K" 'org-agenda-previous-date-line
      "L" 'org-agenda-recenter
      "P" 'org-agenda-show-priority
      "R" 'org-agenda-clockreport-mode
      "Z" 'org-agenda-sunrise-sunset
      "T" 'org-agenda-show-tags
      "X" 'org-agenda-clock-cancel
      "[" 'org-agenda-manipulate-query-add
      "g\\" 'org-agenda-filter-by-tag-refine
      "]" 'org-agenda-manipulate-query-subtract)))
#+END_SRC

** Org Download drag and drop images
#+BEGIN_SRC emacs-lisp
(use-package org-download
  :ensure t
  :config
  ;; add support to dired
  (add-hook 'dired-mode-hook 'org-download-enable))

(setq-default org-download-image-dir "~/apps/org/images")
#+END_SRC

** World Time
#+BEGIN_SRC emacs-lisp
(setq display-time-world-time-format "\t%A %D %r %Z Week-%W")
(setq display-time-world-list '(
                                ("UTC" "Universal")
                                ("Asia/Manila" "Cebu")
                                ("Asia/Kolkata" "Hyderabad")
                                ("America/Chicago" "Austin")                               
                                ("Europe/London" "Scotland")                               
                                ("America/Phoenix" "Scottsdale")))

(define-key evil-normal-state-map (kbd "C-x t") 'helm-world-time)
(define-key evil-normal-state-map (kbd "C-x w") 'world-time-list)
#+END_SRC

** Web mode
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.tsx$" . typescript-mode))
(add-to-list 'auto-mode-alist '("\\.json$" . json-mode))
(add-to-list 'auto-mode-alist '("\\.jsx?$" . web-mode)) ;; auto-enable for .js/.jsx files
(setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))

;; adjust indents for web-mode to 2 spaces
(defun my-web-mode-hook ()
  "Hooks for Web mode. Adjust indents"
  ;;; http://web-mode.org/
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2))
(add-hook 'web-mode-hook  'my-web-mode-hook) 
(add-hook 'after-save-hook 'evil-ex-nohighlight)

#+END_SRC

** Emacs backup files
#+BEGIN_SRC emacs-lisp
;; do not create # files for not saving
(setq create-lockfiles nil)
;; save backup files here rather than on the project dir
(setq backup-directory-alist `(("." . "~/.emacs.d/backup-files")))
#+END_SRC

** Embed youtube
#+BEGIN_SRC emacs-lisp
 (defvar yt-iframe-format
   ;; You may want to change your width and height.
   (concat "<iframe width=\"440\""
           " height=\"335\""
           " src=\"https://www.youtube.com/embed/%s\""
           " frameborder=\"0\""
           " allowfullscreen>%s</iframe>"))
 
 (org-add-link-type
  "yt"
  (lambda (handle)
    (browse-url
     (concat "https://www.youtube.com/embed/"
             handle)))
  (lambda (path desc backend)
    (cl-case backend
      (html (format yt-iframe-format
                    path (or desc "")))
      (latex (format "\href{%s}{%s}"
                     path (or desc "video"))))))
#+END_SRC

** Multi term
#+BEGIN_SRC emacs-lisp
(require 'multi-term)
(setq multi-term-program "/bin/zsh")
(defun last-term-buffer (l)
      "Return most recently used term buffer."
      (when l
  (if (eq 'term-mode (with-current-buffer (car l) major-mode))
      (car l) (last-term-buffer (cdr l)))))

    (defun get-term ()
      "Switch to the term buffer last used, or create a new one if
    none exists, or if the current buffer is already a term."
      (interactive)
      (let ((b (last-term-buffer (buffer-list))))
  (if (or (not b) (eq 'term-mode major-mode))
      (multi-term)
    (switch-to-buffer b))))
#+END_SRC

** Row Number
#+BEGIN_SRC emacs-lisp
(global-linum-mode 1) ; always show line numbers

; disable line number when term mode
(add-hook 'term-mode-hook 'my-inhibit-global-linum-mode)
(defun my-inhibit-global-linum-mode ()
  "Counter-act `global-linum-mode'."
  (add-hook 'after-change-major-mode-hook
            (lambda () (linum-mode 0))
            :append :local))
#+END_SRC
** Clipboard
#+BEGIN_SRC emacs-lisp
;; breaks evil
;; (defun copy-from-osx ()
;; (shell-command-to-string "pbpaste"))
;; 
;; (defun paste-to-osx (text &optional push)
;; (let ((process-connection-type nil))
;; (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
;; (process-send-string proc text)
;; (process-send-eof proc))))
;; 
;; (setq interprogram-cut-function 'paste-to-osx)
;; (setq interprogram-paste-function 'copy-from-osx) 
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
(use-package company
:ensure t
:init
(add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
